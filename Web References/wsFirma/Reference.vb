'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace wsFirma
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CoreSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Core
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private ConvertDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConvertSignDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConvertSignDocumentWithConnectorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClientCertificateImportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConvertCloudDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RegisterCloudEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidateUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecoverCloudDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConvertDocumentWithConnectorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SignDTEDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateDocumentWithCustomResponseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Factura_Electronica.My.MySettings.Default.Factura_Electronica_wsFirma_Core
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event ConvertDocumentCompleted As ConvertDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event ConvertSignDocumentCompleted As ConvertSignDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event ConvertSignDocumentWithConnectorCompleted As ConvertSignDocumentWithConnectorCompletedEventHandler
        
        '''<remarks/>
        Public Event ClientCertificateImportCompleted As ClientCertificateImportCompletedEventHandler
        
        '''<remarks/>
        Public Event ConvertCloudDocumentCompleted As ConvertCloudDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event RegisterCloudEventCompleted As RegisterCloudEventCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidateUserCompleted As ValidateUserCompletedEventHandler
        
        '''<remarks/>
        Public Event RecoverCloudDocumentCompleted As RecoverCloudDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event ConvertDocumentWithConnectorCompleted As ConvertDocumentWithConnectorCompletedEventHandler
        
        '''<remarks/>
        Public Event SignDTEDocumentCompleted As SignDTEDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateDocumentWithCustomResponseCompleted As CreateDocumentWithCustomResponseCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConvertDocument", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConvertDocument(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String) As String
            Dim results() As Object = Me.Invoke("ConvertDocument", New Object() {Area, Password, DocumentType, DocumentContent})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConvertDocumentAsync(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String)
            Me.ConvertDocumentAsync(Area, Password, DocumentType, DocumentContent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConvertDocumentAsync(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String, ByVal userState As Object)
            If (Me.ConvertDocumentOperationCompleted Is Nothing) Then
                Me.ConvertDocumentOperationCompleted = AddressOf Me.OnConvertDocumentOperationCompleted
            End If
            Me.InvokeAsync("ConvertDocument", New Object() {Area, Password, DocumentType, DocumentContent}, Me.ConvertDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnConvertDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConvertDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConvertDocumentCompleted(Me, New ConvertDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConvertSignDocument", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConvertSignDocument(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String) As String
            Dim results() As Object = Me.Invoke("ConvertSignDocument", New Object() {Area, Password, DocumentType, DocumentContent})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConvertSignDocumentAsync(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String)
            Me.ConvertSignDocumentAsync(Area, Password, DocumentType, DocumentContent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConvertSignDocumentAsync(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String, ByVal userState As Object)
            If (Me.ConvertSignDocumentOperationCompleted Is Nothing) Then
                Me.ConvertSignDocumentOperationCompleted = AddressOf Me.OnConvertSignDocumentOperationCompleted
            End If
            Me.InvokeAsync("ConvertSignDocument", New Object() {Area, Password, DocumentType, DocumentContent}, Me.ConvertSignDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnConvertSignDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConvertSignDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConvertSignDocumentCompleted(Me, New ConvertSignDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConvertSignDocumentWithConnector", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConvertSignDocumentWithConnector(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String, ByVal Connector As String) As String
            Dim results() As Object = Me.Invoke("ConvertSignDocumentWithConnector", New Object() {Area, Password, DocumentType, DocumentContent, Connector})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConvertSignDocumentWithConnectorAsync(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String, ByVal Connector As String)
            Me.ConvertSignDocumentWithConnectorAsync(Area, Password, DocumentType, DocumentContent, Connector, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConvertSignDocumentWithConnectorAsync(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String, ByVal Connector As String, ByVal userState As Object)
            If (Me.ConvertSignDocumentWithConnectorOperationCompleted Is Nothing) Then
                Me.ConvertSignDocumentWithConnectorOperationCompleted = AddressOf Me.OnConvertSignDocumentWithConnectorOperationCompleted
            End If
            Me.InvokeAsync("ConvertSignDocumentWithConnector", New Object() {Area, Password, DocumentType, DocumentContent, Connector}, Me.ConvertSignDocumentWithConnectorOperationCompleted, userState)
        End Sub
        
        Private Sub OnConvertSignDocumentWithConnectorOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConvertSignDocumentWithConnectorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConvertSignDocumentWithConnectorCompleted(Me, New ConvertSignDocumentWithConnectorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ClientCertificateImport", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ClientCertificateImport(ByVal Area As String, ByVal PasswordArea As String, ByVal PasswordKey As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal Certificate() As Byte, ByVal IdCertificate As String, ByVal RFC As String) As String
            Dim results() As Object = Me.Invoke("ClientCertificateImport", New Object() {Area, PasswordArea, PasswordKey, Certificate, IdCertificate, RFC})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ClientCertificateImportAsync(ByVal Area As String, ByVal PasswordArea As String, ByVal PasswordKey As String, ByVal Certificate() As Byte, ByVal IdCertificate As String, ByVal RFC As String)
            Me.ClientCertificateImportAsync(Area, PasswordArea, PasswordKey, Certificate, IdCertificate, RFC, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClientCertificateImportAsync(ByVal Area As String, ByVal PasswordArea As String, ByVal PasswordKey As String, ByVal Certificate() As Byte, ByVal IdCertificate As String, ByVal RFC As String, ByVal userState As Object)
            If (Me.ClientCertificateImportOperationCompleted Is Nothing) Then
                Me.ClientCertificateImportOperationCompleted = AddressOf Me.OnClientCertificateImportOperationCompleted
            End If
            Me.InvokeAsync("ClientCertificateImport", New Object() {Area, PasswordArea, PasswordKey, Certificate, IdCertificate, RFC}, Me.ClientCertificateImportOperationCompleted, userState)
        End Sub
        
        Private Sub OnClientCertificateImportOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClientCertificateImportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClientCertificateImportCompleted(Me, New ClientCertificateImportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConvertCloudDocument", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConvertCloudDocument(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String, ByVal obj As ClientInfo, ByVal UseConnector As Boolean, ByVal Connector As String) As String
            Dim results() As Object = Me.Invoke("ConvertCloudDocument", New Object() {Area, Password, DocumentType, DocumentContent, obj, UseConnector, Connector})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConvertCloudDocumentAsync(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String, ByVal obj As ClientInfo, ByVal UseConnector As Boolean, ByVal Connector As String)
            Me.ConvertCloudDocumentAsync(Area, Password, DocumentType, DocumentContent, obj, UseConnector, Connector, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConvertCloudDocumentAsync(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String, ByVal obj As ClientInfo, ByVal UseConnector As Boolean, ByVal Connector As String, ByVal userState As Object)
            If (Me.ConvertCloudDocumentOperationCompleted Is Nothing) Then
                Me.ConvertCloudDocumentOperationCompleted = AddressOf Me.OnConvertCloudDocumentOperationCompleted
            End If
            Me.InvokeAsync("ConvertCloudDocument", New Object() {Area, Password, DocumentType, DocumentContent, obj, UseConnector, Connector}, Me.ConvertCloudDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnConvertCloudDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConvertCloudDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConvertCloudDocumentCompleted(Me, New ConvertCloudDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterCloudEvent", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RegisterCloudEvent(ByVal Area As String, ByVal Password As String, ByVal obj As ClientInfo) As String
            Dim results() As Object = Me.Invoke("RegisterCloudEvent", New Object() {Area, Password, obj})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RegisterCloudEventAsync(ByVal Area As String, ByVal Password As String, ByVal obj As ClientInfo)
            Me.RegisterCloudEventAsync(Area, Password, obj, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RegisterCloudEventAsync(ByVal Area As String, ByVal Password As String, ByVal obj As ClientInfo, ByVal userState As Object)
            If (Me.RegisterCloudEventOperationCompleted Is Nothing) Then
                Me.RegisterCloudEventOperationCompleted = AddressOf Me.OnRegisterCloudEventOperationCompleted
            End If
            Me.InvokeAsync("RegisterCloudEvent", New Object() {Area, Password, obj}, Me.RegisterCloudEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnRegisterCloudEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.RegisterCloudEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RegisterCloudEventCompleted(Me, New RegisterCloudEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidateUser(ByVal Area As String, ByVal Password As String) As String
            Dim results() As Object = Me.Invoke("ValidateUser", New Object() {Area, Password})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidateUserAsync(ByVal Area As String, ByVal Password As String)
            Me.ValidateUserAsync(Area, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidateUserAsync(ByVal Area As String, ByVal Password As String, ByVal userState As Object)
            If (Me.ValidateUserOperationCompleted Is Nothing) Then
                Me.ValidateUserOperationCompleted = AddressOf Me.OnValidateUserOperationCompleted
            End If
            Me.InvokeAsync("ValidateUser", New Object() {Area, Password}, Me.ValidateUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidateUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidateUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidateUserCompleted(Me, New ValidateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RecoverCloudDocument", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecoverCloudDocument(ByVal Area As String, ByVal Password As String, ByVal obj As ClientInfo, ByVal UseConnector As Boolean, ByVal Connector As String) As String
            Dim results() As Object = Me.Invoke("RecoverCloudDocument", New Object() {Area, Password, obj, UseConnector, Connector})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecoverCloudDocumentAsync(ByVal Area As String, ByVal Password As String, ByVal obj As ClientInfo, ByVal UseConnector As Boolean, ByVal Connector As String)
            Me.RecoverCloudDocumentAsync(Area, Password, obj, UseConnector, Connector, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecoverCloudDocumentAsync(ByVal Area As String, ByVal Password As String, ByVal obj As ClientInfo, ByVal UseConnector As Boolean, ByVal Connector As String, ByVal userState As Object)
            If (Me.RecoverCloudDocumentOperationCompleted Is Nothing) Then
                Me.RecoverCloudDocumentOperationCompleted = AddressOf Me.OnRecoverCloudDocumentOperationCompleted
            End If
            Me.InvokeAsync("RecoverCloudDocument", New Object() {Area, Password, obj, UseConnector, Connector}, Me.RecoverCloudDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecoverCloudDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecoverCloudDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecoverCloudDocumentCompleted(Me, New RecoverCloudDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConvertDocumentWithConnector", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConvertDocumentWithConnector(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String, ByVal Connector As String) As String
            Dim results() As Object = Me.Invoke("ConvertDocumentWithConnector", New Object() {Area, Password, DocumentType, DocumentContent, Connector})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConvertDocumentWithConnectorAsync(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String, ByVal Connector As String)
            Me.ConvertDocumentWithConnectorAsync(Area, Password, DocumentType, DocumentContent, Connector, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConvertDocumentWithConnectorAsync(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String, ByVal Connector As String, ByVal userState As Object)
            If (Me.ConvertDocumentWithConnectorOperationCompleted Is Nothing) Then
                Me.ConvertDocumentWithConnectorOperationCompleted = AddressOf Me.OnConvertDocumentWithConnectorOperationCompleted
            End If
            Me.InvokeAsync("ConvertDocumentWithConnector", New Object() {Area, Password, DocumentType, DocumentContent, Connector}, Me.ConvertDocumentWithConnectorOperationCompleted, userState)
        End Sub
        
        Private Sub OnConvertDocumentWithConnectorOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConvertDocumentWithConnectorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConvertDocumentWithConnectorCompleted(Me, New ConvertDocumentWithConnectorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SignDTEDocument", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SignDTEDocument(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String) As String
            Dim results() As Object = Me.Invoke("SignDTEDocument", New Object() {Area, Password, DocumentType, DocumentContent})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SignDTEDocumentAsync(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String)
            Me.SignDTEDocumentAsync(Area, Password, DocumentType, DocumentContent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SignDTEDocumentAsync(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String, ByVal userState As Object)
            If (Me.SignDTEDocumentOperationCompleted Is Nothing) Then
                Me.SignDTEDocumentOperationCompleted = AddressOf Me.OnSignDTEDocumentOperationCompleted
            End If
            Me.InvokeAsync("SignDTEDocument", New Object() {Area, Password, DocumentType, DocumentContent}, Me.SignDTEDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnSignDTEDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.SignDTEDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SignDTEDocumentCompleted(Me, New SignDTEDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateDocumentWithCustomResponse", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateDocumentWithCustomResponse(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String, ByVal Connector As String, <System.Xml.Serialization.XmlElementAttribute("ConvertDocument")> ByVal ConvertDocument1 As Boolean, ByVal SignDocument As Boolean, ByVal PrintDocument As Boolean) As String
            Dim results() As Object = Me.Invoke("CreateDocumentWithCustomResponse", New Object() {Area, Password, DocumentType, DocumentContent, Connector, ConvertDocument1, SignDocument, PrintDocument})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateDocumentWithCustomResponseAsync(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String, ByVal Connector As String, ByVal ConvertDocument1 As Boolean, ByVal SignDocument As Boolean, ByVal PrintDocument As Boolean)
            Me.CreateDocumentWithCustomResponseAsync(Area, Password, DocumentType, DocumentContent, Connector, ConvertDocument1, SignDocument, PrintDocument, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateDocumentWithCustomResponseAsync(ByVal Area As String, ByVal Password As String, ByVal DocumentType As String, ByVal DocumentContent As String, ByVal Connector As String, ByVal ConvertDocument1 As Boolean, ByVal SignDocument As Boolean, ByVal PrintDocument As Boolean, ByVal userState As Object)
            If (Me.CreateDocumentWithCustomResponseOperationCompleted Is Nothing) Then
                Me.CreateDocumentWithCustomResponseOperationCompleted = AddressOf Me.OnCreateDocumentWithCustomResponseOperationCompleted
            End If
            Me.InvokeAsync("CreateDocumentWithCustomResponse", New Object() {Area, Password, DocumentType, DocumentContent, Connector, ConvertDocument1, SignDocument, PrintDocument}, Me.CreateDocumentWithCustomResponseOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateDocumentWithCustomResponseOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateDocumentWithCustomResponseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateDocumentWithCustomResponseCompleted(Me, New CreateDocumentWithCustomResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class ClientInfo
        
        Private rFCField As String
        
        Private dateTimeErrorField As Date
        
        Private serviceField As String
        
        Private typeField As String
        
        Private messageField As String
        
        Private machineNameField As String
        
        Private oSVersionField As String
        
        Private sysNameField As String
        
        Private ipField As String
        
        Private macAddressField As String
        
        '''<remarks/>
        Public Property RFC() As String
            Get
                Return Me.rFCField
            End Get
            Set
                Me.rFCField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DateTimeError() As Date
            Get
                Return Me.dateTimeErrorField
            End Get
            Set
                Me.dateTimeErrorField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Service() As String
            Get
                Return Me.serviceField
            End Get
            Set
                Me.serviceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Type() As String
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Message() As String
            Get
                Return Me.messageField
            End Get
            Set
                Me.messageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MachineName() As String
            Get
                Return Me.machineNameField
            End Get
            Set
                Me.machineNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OSVersion() As String
            Get
                Return Me.oSVersionField
            End Get
            Set
                Me.oSVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SysName() As String
            Get
                Return Me.sysNameField
            End Get
            Set
                Me.sysNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IP() As String
            Get
                Return Me.ipField
            End Get
            Set
                Me.ipField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MacAddress() As String
            Get
                Return Me.macAddressField
            End Get
            Set
                Me.macAddressField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub ConvertDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As ConvertDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConvertDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub ConvertSignDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As ConvertSignDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConvertSignDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub ConvertSignDocumentWithConnectorCompletedEventHandler(ByVal sender As Object, ByVal e As ConvertSignDocumentWithConnectorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConvertSignDocumentWithConnectorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub ClientCertificateImportCompletedEventHandler(ByVal sender As Object, ByVal e As ClientCertificateImportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ClientCertificateImportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub ConvertCloudDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As ConvertCloudDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConvertCloudDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub RegisterCloudEventCompletedEventHandler(ByVal sender As Object, ByVal e As RegisterCloudEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RegisterCloudEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub ValidateUserCompletedEventHandler(ByVal sender As Object, ByVal e As ValidateUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidateUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub RecoverCloudDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As RecoverCloudDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecoverCloudDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub ConvertDocumentWithConnectorCompletedEventHandler(ByVal sender As Object, ByVal e As ConvertDocumentWithConnectorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConvertDocumentWithConnectorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub SignDTEDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As SignDTEDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SignDTEDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub CreateDocumentWithCustomResponseCompletedEventHandler(ByVal sender As Object, ByVal e As CreateDocumentWithCustomResponseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateDocumentWithCustomResponseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
